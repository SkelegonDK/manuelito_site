---
import BaseHead from "@/components/BaseHead.astro";
import Header from "@/components/Header.astro";
import Footer from "@/components/Footer.astro";
import VideoBackground from "@/components/VideoBackground.astro";
import { ClientRouter } from 'astro:transitions';

const { title, description, mainClasses = "" } = Astro.props;
---

<!doctype html>
<html lang="en">
  <head>
    <BaseHead title={title} description={description} />
    <!-- <link rel="stylesheet" href="https://cdnjs.cloudflare.com/ajax/libs/font-awesome/6.7.2/css/all.min.css" crossorigin="anonymous" referrerpolicy="no-referrer" /> -->
    <ClientRouter />
    
    <!-- Global theme initialization - runs before any components -->
    <script is:inline>
      // Initialize theme immediately to prevent flash of wrong theme
      (function() {
        function getThemePreference() {
          if (typeof localStorage !== 'undefined' && localStorage.getItem('theme')) {
            return localStorage.getItem('theme');
          }
          return window.matchMedia('(prefers-color-scheme: dark)').matches ? 'dark' : 'light';
        }

        function applyTheme(theme) {
          document.documentElement.setAttribute('data-theme', theme);
          document.documentElement.style.colorScheme = theme;

          if (theme === 'dark') {
            document.documentElement.classList.add('dark');
            if (document.body) {
              document.body.classList.add('dark');
            }
          } else {
            document.documentElement.classList.remove('dark');
            if (document.body) {
              document.body.classList.remove('dark');
            }
          }
        }

        // Apply theme immediately
        const initialTheme = getThemePreference();
        applyTheme(initialTheme);
      })();
    </script>
  </head>
  <body>
    
    <!-- Video Background Component - Lives here and persists across page transitions -->
    <VideoBackground />
    
    <Header />
    
    <!-- Mobile navigation menu moved to body level to avoid stacking context issues -->
    <div id="mobile-navigation" data-testid="mobile-navigation" class="fixed top-20 left-0 w-full h-0 transform transition-all duration-500 ease-in-out overflow-hidden z-[3000] max-w-full mobile-nav-overlay">
      <!-- Navigation content - positioned below header -->
      <div class="nav-content flex flex-col items-center justify-center h-full relative px-4" style="pointer-events: auto;">
        <ul class="flex flex-col items-center justify-center gap-8 md:gap-10 text-nowrap list-none">
          <li class="nav-link text-xl xl:text-2xl">
            <a href="/" class="frick rounded-md inline-block px-4 py-1 transition ease-in-out">Home</a>
          </li>
          <li class="nav-link text-xl xl:text-2xl">
            <a href="/about" class="frick rounded-md inline-block px-4 py-1 transition ease-in-out">About Me</a>
          </li>
          <li class="nav-link text-xl xl:text-2xl">
            <a href="/courses" class="frick rounded-md inline-block px-4 py-1 transition ease-in-out">Courses</a>
          </li>
          <li class="nav-link text-xl xl:text-2xl">
            <a href="/gallery" class="frick rounded-md inline-block px-4 py-1 transition ease-in-out">Gallery</a>
          </li>
          <li class="nav-link text-xl xl:text-2xl">
            <a href="/blog" class="frick rounded-md inline-block px-4 py-1 transition ease-in-out">Blog</a>
          </li>
        </ul>
      </div>
    </div>
    
    <main class:list={["container mx-auto px-4 md:px-8", mainClasses]}>
      <slot />
    </main>
    <Footer />
    
    <script>
      // Progressive Loading Strategy - Breaking the 486ms dependency chain
      document.addEventListener('DOMContentLoaded', async () => {
        document.body.classList.add('has-video-bg');
        
        try {
          // Use progressive loader for tiered loading strategy
          const { initProgressiveLoader } = await import('@/utils/progressive-loader');
          const loader = initProgressiveLoader();
          
          // Expose loader for debugging and monitoring
          (window as any).progressiveLoader = loader;
          
          console.debug('Progressive loader initialized - breaking dependency chain');
        } catch (error) {
          console.warn('Progressive loader failed, falling back to basic loading:', error);
          
          // Fallback: basic progressive loading
          try {
            const { initImagePreloader } = await import('@/utils/image-preloader');
            initImagePreloader({
              rootMargin: '50px',
              threshold: 0.1,
              enableHoverPreload: true
            });
          } catch (error) {
            console.warn('Image preloader failed to load:', error);
          }
        }
      });
    </script> 
  </body>
</html>

<style is:global>
  /* Removed html { scroll-behavior: smooth; } */

  /* Theme variables using light-dark() function */
  :root {
    color-scheme: light dark;
    --text-color: light-dark(#000000, #ffffff);
    --bg-color: light-dark(#ffffff, #121212);
    /* RGB tokens for brand colors (space-separated for alpha support) */
    --nintendbro-rgb: 204 37 44;
    --jabro-rgb: 255 253 116;
    --brony-rgb: 97 64 81;
    --bluey-rgb: 150 199 242;
    --liquirice-rgb: 48 48 48;

    /* Overlay base using brand tokens */
    --overlay-bg: light-dark(
      rgb(var(--jabro-rgb) / 0.50),
      rgb(var(--liquirice-rgb) / 0.50)
    );
  }
  
  /* Apply theme based on data-theme attribute */
  html[data-theme="light"] {
    color-scheme: light;
  }
  
  html[data-theme="dark"] {
    color-scheme: dark;
  }
  
  /* Add a class to the body for when video is active */
  body.has-video-bg {
    background: transparent;
  }
  
  /* Video overlay variants for different pages */
  .liquirice-overlay {
    position: absolute;
    top: 0;
    left: 0;
    width: 100%;
    height: 100%;
    background: rgb(var(--liquirice-rgb) / 0.53);
    z-index: 1;
  }
  .jabro-overlay {
    position: absolute;
    top: 0;
    left: 0;
    width: 100%;
    height: 100%;
    background: rgb(var(--jabro-rgb) / 0.53);
    z-index: 1;
  }
  /* White overlay for brightness */
  .white-overlay {
    position: absolute;
    top: 0;
    left: 0;
    width: 100%;
    height: 100%;
    background-color: var(--overlay-bg);
    z-index: 1;
  }
  
  /* Mobile navigation styles */
  #mobile-navigation {
    opacity: 0;
    background-color: transparent;
    backdrop-filter: none;
    transition: height 0.5s cubic-bezier(0.4, 0, 0.2, 1), 
                opacity 0.3s cubic-bezier(0.4, 0, 0.2, 1),
                background-color 0.3s cubic-bezier(0.4, 0, 0.2, 1);
    /* Ensure height transitions work smoothly */
    will-change: height, opacity, background-color;
  }
  
  /* Light theme mobile navigation */
  #mobile-navigation.menu-open {
    opacity: 1;
    background-color: rgb(var(--jabro-rgb) / 0.95);
    backdrop-filter: blur(16px);
  }
  
  /* Dark theme mobile navigation */
  :global(.dark) #mobile-navigation.menu-open {
    background-color: rgb(var(--liquirice-rgb) / 0.95);
    backdrop-filter: blur(16px);
  }
  
  /* Faster navigation close animation */
  /* #mobile-navigation.navigating {
    transition: height 0.2s cubic-bezier(0.4, 0, 0.2, 1), 
                opacity 0.2s cubic-bezier(0.4, 0, 0.2, 1),
                background-color 0.2s cubic-bezier(0.4, 0, 0.2, 1),
                backdrop-filter 0.2s cubic-bezier(0.4, 0, 0.2, 1);
  } */
  
  /* Ensure hamburger button area is always clickable */
  #mobile-navigation .hamburger-button-area {
    pointer-events: none;
    z-index: 4000;
  }
  
  /* Ensure navigation content doesn't interfere with hamburger button */
  #mobile-navigation .nav-content {
    pointer-events: auto;
    z-index: 3000;
    opacity: 0;
    transition: opacity 0.3s cubic-bezier(0.4, 0, 0.2, 1);
  }
  
  #mobile-navigation.menu-open .nav-content {
    opacity: 1;
  }
  
  /* Navigation link styles */
  .nav-link a {
    font-weight: 500;
    padding: 0.5rem 1rem;
    border-radius: 0.5rem;
    transition: all 0.3s ease;
    text-decoration: none;
  }
  
  /* Light theme navigation links - dark text on light background */
  .nav-link a {
    color: var(--liquirice);
  }
  
  /* Dark theme navigation links - white text on dark background */
  :global(.dark) .nav-link a {
    color: white;
  }
  
  /* Hover effects for navigation links */
  .nav-link a:hover {
    background-color: rgba(0, 0, 0, 0.1);
    transform: translateY(-1px);
  }
  
  :global(.dark) .nav-link a:hover {
    background-color: rgba(255, 255, 255, 0.1);
  }
  
  /* For browsers that don't support backdrop-filter */
  @supports not (backdrop-filter: blur(16px)) {
    #mobile-navigation {
      background-color: transparent;
      transition: height 0.5s cubic-bezier(0.4, 0, 0.2, 1), 
                  opacity 0.3s cubic-bezier(0.4, 0, 0.2, 1),
                  background-color 0.3s cubic-bezier(0.4, 0, 0.2, 1);
    }
    
    #mobile-navigation.menu-open {
      background-color: rgb(var(--jabro-rgb) / 0.98);
    }
    
    :global(.dark) #mobile-navigation.menu-open {
      background-color: rgb(var(--liquirice-rgb) / 0.98);
    }
  }

  /* Global Scrollbar Styles - Brand Colors from Style Guide */
  
  /* CSS Custom Properties for scrollbar colors */
  :root {
    /* Light theme scrollbar colors (brand-only) */
    --scrollbar-track: var(--bluey);       /* Bluey */
    --scrollbar-thumb: var(--liquirice);  /* Nintendbro */
    --scrollbar-thumb-hover: var(--bluey); /* Bluey */
    --scrollbar-corner: var(--jabro);      /* Jabro */
  }

  /* Dark theme color overrides (brand-only) */
  [data-theme="dark"], 
  html.dark {
    --scrollbar-track: var(--liquirice);      /* Liquirice */
    --scrollbar-thumb: var(--nintendbro);     /* Nintendbro */
    --scrollbar-thumb-hover: var(--bluey);    /* Bluey */
    --scrollbar-corner: var(--liquirice);     /* Liquirice */
  }

  /* Firefox scrollbar styles */
  * {
    scrollbar-width: thin;
    scrollbar-color: var(--scrollbar-thumb) var(--scrollbar-track);
  }

  /* Webkit scrollbar styles (Chrome, Safari, Edge) */
  ::-webkit-scrollbar {
    width: 12px;
    height: 12px;
  }

  ::-webkit-scrollbar-track {
    background: var(--scrollbar-track);
    border-radius: 6px;
  }

  ::-webkit-scrollbar-thumb {
    background: var(--scrollbar-thumb);
    border-radius: 6px;
    border: 2px solid var(--scrollbar-track);
    transition: background-color 0.2s ease;
  }

  ::-webkit-scrollbar-thumb:hover {
    background: var(--scrollbar-thumb-hover);
  }

  ::-webkit-scrollbar-corner {
    background: var(--scrollbar-corner);
  }

  /* Ensure scrollbars are visible on all elements */
  html, body {
    scrollbar-width: thin;
  }

  /* Custom scrollbar for specific elements if needed */
  .custom-scrollbar {
    scrollbar-width: thin;
  }

  /* Mobile-friendly scrollbar adjustments */
  @media (max-width: 768px) {
    ::-webkit-scrollbar {
      width: 8px;
      height: 8px;
    }
  }
  
  /* Ensure hamburger button is always accessible */
  [data-testid="mobile-hamburger"] {
    position: fixed !important;
    top: 1rem !important;
    right: 1rem !important;
    z-index: 5000 !important;
    pointer-events: auto !important;
  }
</style> 