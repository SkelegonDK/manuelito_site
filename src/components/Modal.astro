---
import type { HTMLAttributes } from "astro/types";

interface Props extends HTMLAttributes<'div'> {
  isOpen: boolean;
  onClose: () => void;
}

const { isOpen, onClose, ...attributes } = Astro.props;
---

<div
  {...attributes}
  class:list={[
    "fixed inset-0 z-50 flex items-center justify-center bg-black/40 backdrop-blur-sm",
    {"hidden": !isOpen},
    attributes.class,
  ]}
  role="dialog"
  aria-modal="true"
  aria-hidden={!isOpen}
>
  <div class="relative bg-white dark:bg-gray-900 rounded-xl shadow-2xl max-w-lg w-full p-8 animate-fade-in">
    <button
      class="absolute top-4 right-4 text-gray-500 hover:text-black dark:hover:text-white focus:outline-none text-2xl"
      aria-label="Close modal"
      type="button"
      set:html="&times;"
      onclick="this.closest('[role=\'dialog\']').classList.add('hidden');"
    ></button>
    <slot />
  </div>
</div>

<script is:inline>
  document.addEventListener('DOMContentLoaded', () => {
    const modals = document.querySelectorAll('[role="dialog"][aria-modal="true"]');

    modals.forEach(modal => {
      // Close on backdrop click
      modal.addEventListener('click', (e) => {
        if (e.target === modal) {
          modal.classList.add('hidden');
          modal.setAttribute('aria-hidden', 'true');
        }
      });
    });

    // Close on Escape key for any open modal
    document.addEventListener('keydown', (e) => {
      if (e.key === 'Escape') {
        const openModal = document.querySelector('[role="dialog"][aria-modal="true"]:not(.hidden)');
        if (openModal) {
          openModal.classList.add('hidden');
          openModal.setAttribute('aria-hidden', 'true');
        }
      }
    });

    // Add click listener to close button using event delegation
    document.body.addEventListener('click', (e) => {
      const closeButton = e.target.closest('[aria-label="Close modal"]');
      if (closeButton && closeButton.type === 'button') {
        const parentModal = closeButton.closest('[role="dialog"]');
        if (parentModal) {
            parentModal.classList.add('hidden');
            parentModal.setAttribute('aria-hidden', 'true');
        }
      }
    });
  });
</script>

<style>
  @keyframes fade-in {
    from { opacity: 0; transform: translateY(20px); }
    to { opacity: 1; transform: translateY(0); } 
  }
  .animate-fade-in {
    animation: fade-in 0.3s ease;
  }
</style> 