---
// ThemeIcon component - handles theme switching
---

<button id="themeToggle" aria-label="Toggle dark/light mode">
  <svg width="30px" xmlns="http://www.w3.org/2000/svg" viewBox="0 0 24 24">
    <path class="sun" fill-rule="evenodd" d="M12 17.5a5.5 5.5 0 1 0 0-11 5.5 5.5 0 0 0 0 11zm0 1.5a7 7 0 1 0 0-14 7 7 0 0 0 0 14zm12-7a.8.8 0 0 1-.8.8h-2.4a.8.8 0 0 1 0-1.6h2.4a.8.8 0 0 1 .8.8zM4 12a.8.8 0 0 1-.8.8H.8a.8.8 0 0 1 0-1.6h2.5a.8.8 0 0 1 .8.8zm16.5-8.5a.8.8 0 0 1 0 1l-1.8 1.8a.8.8 0 0 1-1-1l1.7-1.8a.8.8 0 0 1 1 0zM6.3 17.7a.8.8 0 0 1 0 1l-1.7 1.8a.8.8 0 1 1-1-1l1.7-1.8a.8.8 0 0 1 1 0zM12 0a.8.8 0 0 1 .8.8v2.5a.8.8 0 0 1-1.6 0V.8A.8.8 0 0 1 12 0zm0 20a.8.8 0 0 1 .8.8v2.4a.8.8 0 0 1-1.6 0v-2.4a.8.8 0 0 1 .8-.8zM3.5 3.5a.8.8 0 0 1 1 0l1.8 1.8a.8.8 0 1 1-1 1L3.5 4.6a.8.8 0 0 1 0-1zm14.2 14.2a.8.8 0 0 1 1 0l1.8 1.7a.8.8 0 0 1-1 1l-1.8-1.7a.8.8 0 0 1 0-1z"/>
    <path class="moon" fill-rule="evenodd" d="M16.5 6A10.5 10.5 0 0 1 4.7 16.4 8.5 8.5 0 1 0 16.4 4.7l.1 1.3zm-1.7-2a9 9 0 0 1 .2 2 9 9 0 0 1-11 8.8 9.4 9.4 0 0 1-.8-.3c-.4 0-.8.3-.7.7a10 10 0 0 0 .3.8 10 10 0 0 0 9.2 6 10 10 0 0 0 4-19.2 9.7 9.7 0 0 0-.9-.3c-.3-.1-.7.3-.6.7a9 9 0 0 1 .3.8z"/>
  </svg>
</button>

<style>
  #themeToggle {
    border: 0;
    background: none;
    cursor: pointer;
    padding: 0.5rem;
    border-radius: 0.375rem;
    transition: background-color 0.2s ease;
  }
  
  #themeToggle:hover {
    background-color: rgba(0, 0, 0, 0.1);
  }
  
  :global(.dark) #themeToggle:hover {
    background-color: rgba(255, 255, 255, 0.1);
  }
  
  .sun { fill: black; }
  .moon { fill: transparent; }

  :global(.dark) .sun { fill: transparent; }
  :global(.dark) .moon { fill: white; }
</style>

<script is:inline>
  // Global theme state to prevent multiple initializations
  if (!window.themeInitialized) {
    window.themeInitialized = false;
  }

  // Theme toggle functionality
  function getThemePreference() {
    if (typeof localStorage !== 'undefined' && localStorage.getItem('theme')) {
      return localStorage.getItem('theme');
    }
    return window.matchMedia('(prefers-color-scheme: dark)').matches ? 'dark' : 'light';
  }

  function applyTheme(theme) {
    document.documentElement.setAttribute('data-theme', theme);
    document.documentElement.style.colorScheme = theme;

    // For backward compatibility with existing CSS that might use .dark class
    if (theme === 'dark') {
      document.documentElement.classList.add('dark');
      if (document.body) {
        document.body.classList.add('dark');
      }
    } else {
      document.documentElement.classList.remove('dark');
      if (document.body) {
        document.body.classList.remove('dark');
      }
    }
  }

  function toggleTheme() {
    const currentTheme = getThemePreference();
    const newTheme = currentTheme === 'light' ? 'dark' : 'light';
    applyTheme(newTheme);
    localStorage.setItem('theme', newTheme);
  }

  // Initialize theme only once globally
  function initTheme() {
    if (window.themeInitialized) {
      return; // Already initialized
    }
    
    const initialTheme = getThemePreference();
    applyTheme(initialTheme);
    window.themeInitialized = true;
  }

  // Set up event listener for theme toggle
  function setupThemeToggle() {
    const themeToggle = document.getElementById('themeToggle');
    if (themeToggle) {
      // Remove existing event listeners to prevent duplicates
      themeToggle.removeEventListener('click', toggleTheme);
      themeToggle.addEventListener('click', toggleTheme);
    }
  }

  // Initialize theme and setup toggle on page load
  function initializeThemeSystem() {
    initTheme();
    setupThemeToggle();
  }

  // Handle different DOM loading states
  if (document.readyState === 'loading') {
    document.addEventListener('DOMContentLoaded', initializeThemeSystem);
  } else {
    initializeThemeSystem();
  }

  // Handle Astro view transitions
  document.addEventListener('astro:page-load', () => {
    // Re-setup the theme toggle after page transitions
    setupThemeToggle();
  });

  // Also handle the before-swap event to maintain theme state
  document.addEventListener('astro:before-swap', () => {
    // Store current theme state if needed
    const currentTheme = getThemePreference();
    sessionStorage.setItem('tempTheme', currentTheme);
  });

  // And after-swap to restore theme state
  document.addEventListener('astro:after-swap', () => {
    const storedTheme = sessionStorage.getItem('tempTheme');
    if (storedTheme) {
      applyTheme(storedTheme);
      sessionStorage.removeItem('tempTheme');
    }
    setupThemeToggle();
  });
</script>